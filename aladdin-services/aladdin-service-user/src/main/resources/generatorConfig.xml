<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <classPathEntry location="/Users/xyy/.m2/repository/mysql/mysql-connector-java/8.0.20/mysql-connector-java-8.0.20.jar"/>

    <context id="MySqlTables" targetRuntime="MyBatis3">
        <!-- 自动识别数据库关键字，默认false -->
        <property name="autoDelimitKeywords" value="true"/>
        <!-- 可以使用``包括字段名，避免字段名与sql保留字冲突报错，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

        <!-- 生成mapper.xml时覆盖原文件 -->
        <plugin type="org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin"/>
        <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/>
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>
<!--        <plugin type="org.mybatis.generator.plugins.MapperAnnotationPlugin"/>-->
        <!-- 配置 tk.mybatis 插件 -->
        <plugin type="tk.mybatis.mapper.generator.MapperPlugin">
            <!-- <property name="mappers" value="tk.mybatis.mapper.common.Mapper,tk.mybatis.mapper.hsqldb.HsqldbMapper"/> -->
            <property name="mappers" value="tk.mybatis.mapper.common.Mapper"/>
<!--            <property name="mappers" value="com.xiongyayun.aladdin.common.mybatis.mapper.AladdinMapper"/>-->
            <!-- caseSensitive默认false，当数据库表名区分大小写时，可以将该属性设置为true -->
            <property name="caseSensitive" value="true"/>
            <!-- forceAnnotation 是否强制生成注解，默认 false，如果设置为 true，不管数据库名和字段名是否一致，都会生成注解（包含 @Table 和 @Column）。 -->
            <!-- <property name="forceAnnotation" value="false"/>-->
            <property name="beginningDelimiter" value="`"/>
            <property name="endingDelimiter" value="`"/>
            <property name="swagger" value="true"/>
        </plugin>

        <!-- 是否生成注释 -->
<!--        <commentGenerator>-->
<!--            &lt;!&ndash; 这个元素用来去除指定生成的注释中是否包含生成的日期 false:表示保护 &ndash;&gt;-->
<!--            &lt;!&ndash; 如果生成日期，会造成即使修改一个字段，整个实体类所有属性都会发生变化，不利于版本控制，所以设置为true &ndash;&gt;-->
<!--            <property name="suppressDate" value="true"/>-->
<!--            &lt;!&ndash; 是否去除自动生成的注释 true：是 ： false:否 &ndash;&gt;-->
<!--            <property name="suppressAllComments" value="false"/>-->
<!--            <property name="addRemarkComments" value="true"/>-->
<!--            <property name="javaFileEncoding" value="UTF-8"/>-->
<!--        </commentGenerator>-->
        <commentGenerator type="com.xiongyayun.mybatis.generator.AladdinCommentGenerator">
            <property name="author" value="XYY"/>
            <property name="dateFormat" value="yyyy/MM/dd"/>
        </commentGenerator>

        <jdbcConnection driverClass="com.mysql.cj.jdbc.Driver"
                        connectionURL="jdbc:mysql://47.107.179.245:3306/athena?connectTimeout=1000&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai"
                        userId="athena"
                        password="athena">
            <property name="useInformationSchema" value="true"/>
        </jdbcConnection>

        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制 -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类
            targetPackage     指定生成的model生成所在的包名
            targetProject     指定在该项目下所在的路径
            (model/pojo/entity)
        -->
        <javaModelGenerator targetPackage="com.xiongyayun.aladdin.service.user.model" targetProject="src/main/java">
            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="false"/>
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="false"/>
            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>
            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
            <property name="trimStrings" value="false"/>
        </javaModelGenerator>

        <!--mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 -->
        <sqlMapGenerator targetPackage="mappers" targetProject="src/main/resources">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码
                type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
                type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
                type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口
        -->
        <!-- targetPackage：mapper接口dao生成的位置 -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.xiongyayun.aladdin.service.user.mapper" targetProject="src/main/java">
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false" />
        </javaClientGenerator>

        <table tableName="user"
               domainObjectName="User"
               enableCountByExample="false"
               enableUpdateByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false"
               selectByExampleQueryId="false">
            <!-- 上面的属性都可以使用子标签形式表示 -->
            <!-- 是否使用真实字段名，设置为false将自动驼峰转换 -->
            <property name="useActualColumnNames" value="false" />
            <!-- 还可以对表中的字段进行类型转换 -->
            <!-- 这里转换的原因是会自动将个位的int值自动转化为Boolean，所以指定为Integer -->
            <columnOverride column="sex" javaType="Integer"/>
        </table>

    </context>
</generatorConfiguration>